import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import {configDotenv} from "dotenv";
import fs from "node:fs";
const path = './src/translations/locales.json';

const languages = ['fr-FR', 'en-EN'];

configDotenv()
// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_CLIENT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY.split(String.raw`\n`).join('\n'),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const SHEET_ID = "1nHfEwuTo3oXrJ6IlEKhDCAVQqOBUmCWdP_kjtkmpcbs";

async function fetchGoogleSheet() {
    try {
        const doc = new GoogleSpreadsheet(SHEET_ID, serviceAccountAuth);
        await doc.loadInfo(); // loads document properties and worksheets

        const sheet = doc.sheetsByIndex[0]; // assuming first sheet
        const rows = await sheet.getRows();

        return rows.map(row => row._rawData);
    } catch (error) {
        console.error("Erreur lors de la récupération du Google Sheet :", error);
        return [];
    }
}
fetchGoogleSheet().then((datas) => {
    const lang = {};

    for (let data of datas) {
        if (data.length <= languages.length) {
            continue;
        }

        for (let i = 0; i < languages.length; i++) {
            const language = languages[i];

            if (!lang[language]) {
                lang[language] = {}; // Utiliser un objet au lieu d'un tableau
            }

            lang[language][data[0]] = data[i + 1]; // Ajouter directement la clé/valeur
        }
    }

    if (fs.existsSync(path)) {
        fs.unlinkSync(path);
    }

    fs.writeFileSync(path, JSON.stringify(lang, null, 2));

    console.log('[File updated]');
});

